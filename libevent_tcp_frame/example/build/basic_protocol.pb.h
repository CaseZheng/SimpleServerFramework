// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic_protocol.proto

#ifndef PROTOBUF_basic_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_basic_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace basic_protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_basic_5fprotocol_2eproto();
void protobuf_AssignDesc_basic_5fprotocol_2eproto();
void protobuf_ShutdownFile_basic_5fprotocol_2eproto();

class PbBasicProtocol;

// ===================================================================

class PbBasicProtocol : public ::google::protobuf::Message {
 public:
  PbBasicProtocol();
  virtual ~PbBasicProtocol();

  PbBasicProtocol(const PbBasicProtocol& from);

  inline PbBasicProtocol& operator=(const PbBasicProtocol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbBasicProtocol& default_instance();

  void Swap(PbBasicProtocol* other);

  // implements Message ----------------------------------------------

  PbBasicProtocol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbBasicProtocol& from);
  void MergeFrom(const PbBasicProtocol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string strVersion = 1;
  inline bool has_strversion() const;
  inline void clear_strversion();
  static const int kStrVersionFieldNumber = 1;
  inline const ::std::string& strversion() const;
  inline void set_strversion(const ::std::string& value);
  inline void set_strversion(const char* value);
  inline void set_strversion(const char* value, size_t size);
  inline ::std::string* mutable_strversion();
  inline ::std::string* release_strversion();
  inline void set_allocated_strversion(::std::string* strversion);

  // required string strServerId = 2;
  inline bool has_strserverid() const;
  inline void clear_strserverid();
  static const int kStrServerIdFieldNumber = 2;
  inline const ::std::string& strserverid() const;
  inline void set_strserverid(const ::std::string& value);
  inline void set_strserverid(const char* value);
  inline void set_strserverid(const char* value, size_t size);
  inline ::std::string* mutable_strserverid();
  inline ::std::string* release_strserverid();
  inline void set_allocated_strserverid(::std::string* strserverid);

  // @@protoc_insertion_point(class_scope:basic_protocol.PbBasicProtocol)
 private:
  inline void set_has_strversion();
  inline void clear_has_strversion();
  inline void set_has_strserverid();
  inline void clear_has_strserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strversion_;
  ::std::string* strserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_basic_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_basic_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_basic_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static PbBasicProtocol* default_instance_;
};
// ===================================================================


// ===================================================================

// PbBasicProtocol

// required string strVersion = 1;
inline bool PbBasicProtocol::has_strversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbBasicProtocol::set_has_strversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbBasicProtocol::clear_has_strversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbBasicProtocol::clear_strversion() {
  if (strversion_ != &::google::protobuf::internal::kEmptyString) {
    strversion_->clear();
  }
  clear_has_strversion();
}
inline const ::std::string& PbBasicProtocol::strversion() const {
  return *strversion_;
}
inline void PbBasicProtocol::set_strversion(const ::std::string& value) {
  set_has_strversion();
  if (strversion_ == &::google::protobuf::internal::kEmptyString) {
    strversion_ = new ::std::string;
  }
  strversion_->assign(value);
}
inline void PbBasicProtocol::set_strversion(const char* value) {
  set_has_strversion();
  if (strversion_ == &::google::protobuf::internal::kEmptyString) {
    strversion_ = new ::std::string;
  }
  strversion_->assign(value);
}
inline void PbBasicProtocol::set_strversion(const char* value, size_t size) {
  set_has_strversion();
  if (strversion_ == &::google::protobuf::internal::kEmptyString) {
    strversion_ = new ::std::string;
  }
  strversion_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbBasicProtocol::mutable_strversion() {
  set_has_strversion();
  if (strversion_ == &::google::protobuf::internal::kEmptyString) {
    strversion_ = new ::std::string;
  }
  return strversion_;
}
inline ::std::string* PbBasicProtocol::release_strversion() {
  clear_has_strversion();
  if (strversion_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strversion_;
    strversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbBasicProtocol::set_allocated_strversion(::std::string* strversion) {
  if (strversion_ != &::google::protobuf::internal::kEmptyString) {
    delete strversion_;
  }
  if (strversion) {
    set_has_strversion();
    strversion_ = strversion;
  } else {
    clear_has_strversion();
    strversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string strServerId = 2;
inline bool PbBasicProtocol::has_strserverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbBasicProtocol::set_has_strserverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbBasicProtocol::clear_has_strserverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbBasicProtocol::clear_strserverid() {
  if (strserverid_ != &::google::protobuf::internal::kEmptyString) {
    strserverid_->clear();
  }
  clear_has_strserverid();
}
inline const ::std::string& PbBasicProtocol::strserverid() const {
  return *strserverid_;
}
inline void PbBasicProtocol::set_strserverid(const ::std::string& value) {
  set_has_strserverid();
  if (strserverid_ == &::google::protobuf::internal::kEmptyString) {
    strserverid_ = new ::std::string;
  }
  strserverid_->assign(value);
}
inline void PbBasicProtocol::set_strserverid(const char* value) {
  set_has_strserverid();
  if (strserverid_ == &::google::protobuf::internal::kEmptyString) {
    strserverid_ = new ::std::string;
  }
  strserverid_->assign(value);
}
inline void PbBasicProtocol::set_strserverid(const char* value, size_t size) {
  set_has_strserverid();
  if (strserverid_ == &::google::protobuf::internal::kEmptyString) {
    strserverid_ = new ::std::string;
  }
  strserverid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbBasicProtocol::mutable_strserverid() {
  set_has_strserverid();
  if (strserverid_ == &::google::protobuf::internal::kEmptyString) {
    strserverid_ = new ::std::string;
  }
  return strserverid_;
}
inline ::std::string* PbBasicProtocol::release_strserverid() {
  clear_has_strserverid();
  if (strserverid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strserverid_;
    strserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PbBasicProtocol::set_allocated_strserverid(::std::string* strserverid) {
  if (strserverid_ != &::google::protobuf::internal::kEmptyString) {
    delete strserverid_;
  }
  if (strserverid) {
    set_has_strserverid();
    strserverid_ = strserverid;
  } else {
    clear_has_strserverid();
    strserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace basic_protocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_basic_5fprotocol_2eproto__INCLUDED
